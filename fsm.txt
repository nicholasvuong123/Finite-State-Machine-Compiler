### CODE BELOW PROVIDED BY BERKELEY ### //CODE HAS NOT BEEN INTEGRATED// #####################################################################################


def lex_num(line):  #goes till the end of the line and remembers the number
    num = ""
    for i in line:
        if not i.isdigit():
            break
    return 'num', int(num), len(num)


def lex_str(line):
    #re.delimiter = line[0]
    string = ""
    for i in line:
        string += i
    return 'str', string, len(string)


def lex_id(line):
    keys = ['print', 'var', 'while', 'if', 'elif', 'else']
    id = ""
    for i in line:
        if not i.isdigit() and not i.isalpha and i != "_":
            break
        id += i
    if id in keys:
        return 'key', id, len(id)
    else:
        return 'ID', id, len(id)


def lex(line):
    lexeme_count = 0
    while lexeme_count < len(line):
        lexeme = line[lexeme_count]
        if lexeme.isdigit():
            typ, tok, consumed = lex_num(
                line[lexeme_count:]
            )  #making a variable for each token, one for the token itself and one for the amount of lexemes 'consumed', 'eaten', or 'scanned'; Then we are assigning those variables to a function call which will take the rest of the current line and gets the rest of the token; after that, we change lexeme_count by the amound of characters consumed
            lexeme_count += consumed
        elif lexeme == '"' or lexeme == "'":
            typ, tok, consumed = lex_str(line[lexeme_count:])
            lexeme_count += consumed
        elif lexeme.isalpha():
            typ, tok, consumed = lex_id(line[lexeme_count:])
            lexeme_count += consumed
        else:
            lexeme_count += 1
# code = input()
# lex(code)
### CODE ABOVE PROVIDED BY BERKELEY ### //CODE HAS NOT BEEN INTEGRATED// #######################################################################################